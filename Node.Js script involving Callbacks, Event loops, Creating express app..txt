const express = require('express');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = 3000;

app.use(express.json());

app.get('/demo-callbacks', (req, res) => {
  console.log('=== Callback Demonstration ===');
  
  const fileContent = 'This is sample file content created for demonstration.\nNode.js callbacks are awesome!';
  
  fs.writeFile('example.txt', fileContent, (writeErr) => {
    if (writeErr) {
      console.log('Error creating file:', writeErr.message);
      return res.send('Error creating file');
    }
    
    console.log('example.txt file created successfully');
    
    fs.readFile('example.txt', 'utf8', (readErr, data) => {
      if (readErr) {
        console.log('Error reading file:', readErr.message);
        return res.send('Error reading file');
      } else {
        console.log('File content:', data);
        
        fs.writeFile('output.txt', 'This was written using callback!\nTimestamp: ' + new Date().toISOString(), (writeErr2) => {
          if (writeErr2) {
            console.log('Error writing output file:', writeErr2.message);
            return res.send('Error writing output file');
          } else {
            console.log('output.txt file written successfully');
            
            res.json({
              message: 'Callback operations completed successfully!',
              filesCreated: ['example.txt', 'output.txt'],
              fileContent: data
            });
          }
        });
      }
    });
  });
});

app.get('/event-loop', (req, res) => {
  console.log('=== Event Loop Demonstration ===');
  
  console.log('1. Start - Synchronous code (executes immediately)');
  
  setTimeout(() => {
    console.log('3. setTimeout callback - from Timer Queue (macrotask)');
  }, 0);
  
  setImmediate(() => {
    console.log('4. setImmediate callback - from Check Queue (macrotask)');
  });
  
  Promise.resolve().then(() => {
    console.log('2. Promise callback - from Microtask Queue (highest priority)');
  });
  
  process.nextTick(() => {
    console.log('2.5. process.nextTick - from Next Tick Queue (highest priority)');
  });
  
  console.log('5. End - Synchronous code (executes immediately)');
  
  res.json({
    message: 'Check server console for event loop demonstration',
    explanation: 'The order in console shows: Sync > Microtasks > Macrotasks',
    queuePriority: [
      '1. Synchronous code',
      '2. process.nextTick',
      '3. Promise callbacks',
      '4. setTimeout',
      '5. setImmediate'
    ]
  });
});

app.get('/', (req, res) => {
  res.json({ 
    message: 'Welcome to Express Server!',
    server: 'Node.js with Express',
    version: '1.0.0',
    endpoints: [
      'GET  / - Server information (this page)',
      'GET  /demo-callbacks - Demonstrates Node.js callbacks',
      'GET  /event-loop - Demonstrates event loop behavior',
      'GET  /users - Get all users',
      'GET  /users/:id - Get user by ID',
      'POST /users - Create new user'
    ],
    installation: {
      step1: 'npm install express',
      step2: 'npm install --save-dev nodemon (optional)',
      step3: 'Add scripts to package.json: "start": "node server.js", "dev": "nodemon server.js"',
      step4: 'Run: npm run dev (development) or npm start (production)'
    }
  });
});

let users = [
  { id: 1, name: 'John Doe', email: 'john@example.com', role: 'admin' },
  { id: 2, name: 'Jane Smith', email: 'jane@example.com', role: 'user' },
  { id: 3, name: 'Bob Johnson', email: 'bob@example.com', role: 'user' }
];

app.get('/users', (req, res) => {
  console.log('Fetching all users...');
  res.json({
    count: users.length,
    users: users
  });
});

app.get('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  console.log(`Fetching user with ID: ${userId}`);
  
  const user = users.find(u => u.id === userId);
  
  if (user) {
    res.json({
      message: 'User found successfully',
      user: user
    });
  } else {
    res.status(404).json({ 
      error: 'User not found',
      availableIds: users.map(u => u.id)
    });
  }
});

app.post('/users', (req, res) => {
  console.log('Creating new user...', req.body);
  
  if (!req.body.name || !req.body.email) {
    return res.status(400).json({
      error: 'Name and email are required fields',
      received: req.body
    });
  }
  
  const newUser = {
    id: users.length + 1,
    name: req.body.name,
    email: req.body.email,
    role: req.body.role || 'user',
    createdAt: new Date().toISOString()
  };
  
  users.push(newUser);
  
  res.status(201).json({
    message: 'User created successfully',
    user: newUser,
    totalUsers: users.length
  });
});

app.use((err, req, res, next) => {
  console.error('Server Error:', err.stack);
  res.status(500).json({ 
    error: 'Something went wrong!',
    message: err.message
  });
});

app.use((req, res) => {
  res.status(404).json({ 
    error: 'Route not found',
    availableRoutes: [
      '/',
      '/demo-callbacks', 
      '/event-loop',
      '/users',
      '/users/:id'
    ],
    method: req.method,
    requestedUrl: req.originalUrl
  });
});

app.listen(PORT, () => {
  console.log(`
==============================================
EXPRESS SERVER STARTED SUCCESSFULLY!
==============================================
Server running on: http://localhost:${PORT}
  
Available Endpoints:
  GET  http://localhost:${PORT}/           - Server information
  GET  http://localhost:${PORT}/demo-callbacks - Callback demonstration
  GET  http://localhost:${PORT}/event-loop     - Event loop demonstration
  GET  http://localhost:${PORT}/users        - Get all users
  GET  http://localhost:${PORT}/users/1      - Get user by ID
  POST http://localhost:${PORT}/users        - Create new user

To test POST endpoint, use:
  curl -X POST -H "Content-Type: application/json" -d '{"name":"Test User","email":"test@example.com"}' http://localhost:${PORT}/users

Installation completed successfully! 🎉
==============================================
  `);
});

console.log(`
=== Node.js Event Loop Demo (Server Startup) ===
Understanding the execution order:

Queue Priority:
1. Synchronous code
2. process.nextTick (Microtask - Highest)
3. Promise callbacks (Microtask)
4. setTimeout/setInterval (Macrotask - Timer Queue)
5. setImmediate (Macrotask - Check Queue)
6. I/O Callbacks (Macrotask - I/O Queue)

Now observing the actual execution order:
`);

setTimeout(() => console.log('📝 Timer 1 (setTimeout) - from Timer Queue'), 0);
setImmediate(() => console.log('✅ Immediate 1 (setImmediate) - from Check Queue'));
Promise.resolve().then(() => console.log('🔮 Promise 1 - from Microtask Queue'));
process.nextTick(() => console.log('⚡ NextTick 1 - from Next Tick Queue (Highest Priority)'));

console.log('🟢 Synchronous code 1 - executes immediately');

setTimeout(() => console.log('📝 Timer 2 (setTimeout) - from Timer Queue'), 0);
setImmediate(() => console.log('✅ Immediate 2 (setImmediate) - from Check Queue'));
Promise.resolve().then(() => console.log('🔮 Promise 2 - from Microtask Queue'));

console.log('🟢 Synchronous code 2 - executes immediately');





Installation Commands:

# Step 1: Install Node.js (download from https://nodejs.org/)

# Step 2: Create project directory
mkdir my-express-server
cd my-express-server

# Step 3: Initialize package.json
npm init -y

# Step 4: Install Express
npm install express

# Step 5: Install Nodemon (optional, for development)
npm install --save-dev nodemon



Running the server:

# For development (with auto-restart)
npm run dev

# For production
npm start



Testing Endpoints:

# Test the root endpoint
curl http://localhost:3000/

# Test callbacks endpoint
curl http://localhost:3000/demo-callbacks

# Test event loop endpoint
curl http://localhost:3000/event-loop

# Test users endpoint
curl http://localhost:3000/users

# Test creating a user
curl -X POST -H "Content-Type: application/json" -d '{"name":"Test User","email":"test@example.com"}' http://localhost:3000/users

