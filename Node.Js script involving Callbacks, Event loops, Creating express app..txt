// Simple Node.js Example with Callbacks, Promises, and Events
const express = require("express");
const { EventEmitter } = require("events");
const app = express();
const event = new EventEmitter();

app.use(express.json());

// ---------------- CALLBACK ----------------
function getData(cb) {
  console.log("Fetching data (callback)...");
  setTimeout(() => Math.random() > 0.5
    ? cb(null, { id: 1, msg: "Callback success" })
    : cb(new Error("Callback failed")), 1000);
}

// ---------------- PROMISE ----------------
function getDataPromise() {
  console.log("Fetching data (promise)...");
  return new Promise((res, rej) =>
    setTimeout(() => Math.random() > 0.5
      ? res({ id: 2, msg: "Promise success" })
      : rej(new Error("Promise failed")), 1000)
  );
}

// ---------------- EVENTS ----------------
event.on("info", d => console.log("Event:", d));
event.on("error", e => console.error("Error:", e.message));

// ---------------- EVENT LOOP DEMO ----------------
console.log("Start");
process.nextTick(() => console.log("NextTick"));
Promise.resolve().then(() => console.log("Promise"));
setTimeout(() => console.log("Timeout"), 500);
setImmediate(() => console.log("Immediate"));
console.log("End");

// ---------------- ROUTES ----------------
app.get("/", (r, s) => s.send("<h2>Node.js Demo ðŸš€</h2>"));
app.get("/callback", (r, s) =>
  getData((e, d) => e ? s.status(500).json({ e: e.message }) : s.json(d))
);
app.get("/promise", async (r, s) => {
  try { s.json(await getDataPromise()); }
  catch (e) { s.status(500).json({ e: e.message }); }
});
app.get("/event", (r, s) => { event.emit("info", "Event triggered"); s.json({ ok: true }); });

app.listen(3000, () => console.log("Server running â†’ http://localhost:3000"));
