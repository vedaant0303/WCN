<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Async JavaScript & Callbacks</title>
</head>
<body>
    <h1>Asynchronous JavaScript & Callbacks</h1>
    
    <button onclick="demoCallbacks()">Demo Callbacks</button>
    <button onclick="demoAsyncAwait()">Demo Async/Await</button>
    
    <div id="output" style="margin-top: 20px; padding: 10px; border: 1px solid #ccc;"></div>

    <script>
        const outputElement = document.getElementById('output');
        
        // Simulate fetching data with callback
        function fetchData(callback) {
            outputElement.innerHTML += "Fetching data...<br>";
            setTimeout(() => {
                const data = { id: 1, name: "John Doe", email: "john@example.com" };
                callback(data);
            }, 2000);
        }
        
        // Callback function to process data
        function processData(data) {
            outputElement.innerHTML += `Data received: ${JSON.stringify(data)}<br>`;
        }
        
        // Demo callbacks
        function demoCallbacks() {
            outputElement.innerHTML = "";
            outputElement.innerHTML += "=== Callback Demo ===<br>";
            
            // Using callback
            fetchData(processData);
            
            // Nested callbacks (callback hell example)
            outputElement.innerHTML += "Starting nested callbacks...<br>";
            
            setTimeout(() => {
                outputElement.innerHTML += "First operation completed<br>";
                
                setTimeout(() => {
                    outputElement.innerHTML += "Second operation completed<br>";
                    
                    setTimeout(() => {
                        outputElement.innerHTML += "Third operation completed<br>";
                        outputElement.innerHTML += "All operations done!<br>";
                    }, 1000);
                }, 1000);
            }, 1000);
        }
        
        // Using async/await (modern approach)
        function simulateAsyncOperation() {
            return new Promise((resolve) => {
                setTimeout(() => {
                    resolve("Async operation completed!");
                }, 1500);
            });
        }
        
        async function demoAsyncAwait() {
            outputElement.innerHTML = "";
            outputElement.innerHTML += "=== Async/Await Demo ===<br>";
            
            try {
                outputElement.innerHTML += "Starting async operation...<br>";
                const result = await simulateAsyncOperation();
                outputElement.innerHTML += result + "<br>";
                outputElement.innerHTML += "Continuing after async operation<br>";
            } catch (error) {
                outputElement.innerHTML += `Error: ${error}<br>`;
            }
        }
        
        // Event listener with callback
        document.addEventListener('DOMContentLoaded', function() {
            outputElement.innerHTML += "Document loaded successfully!<br>";
        });
    </script>
</body>
</html>
